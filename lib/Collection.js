// Generated by CoffeeScript 1.12.2
(function() {
  var Collection;

  Collection = (function() {
    function Collection(_name, __driver) {
      this._name = _name;
      this.__driver = __driver;
      this.setData(this.getDriver().load(this._name));
    }

    Collection.prototype.insert = function(item) {
      this.getData().push(item);
      return this.save();
    };

    Collection.prototype.findOne = function(query, cb) {
      var result;
      if (query == null) {
        query = {};
      }
      result = this.find(query).shift();
      if (cb) {
        return cb(result);
      }
      return result;
    };

    Collection.prototype.find = function(query, cb) {
      var it, result;
      if (query == null) {
        query = {};
      }
      it = this;
      result = this.getData().filter(function(item, index) {
        if (it.compare(item, query)) {
          return item;
        }
      });
      if (cb) {
        return cb(result);
      }
      return result;
    };

    Collection.prototype.compare = function(item, query) {
      var flag, k, v;
      flag = true;
      for (k in query) {
        v = query[k];
        if (item[k] !== v) {
          flag = false;
        }
      }
      return flag;
    };

    Collection.prototype.update = function(query, replace, cb) {
      var changed, i, index, ocurrences;
      if (query == null) {
        query = {};
      }
      if (replace == null) {
        replace = {};
      }
      ocurrences = this.find(query);
      changed = ocurrences.length;
      while (i = ocurrences.shift()) {
        index = this.getData().indexOf(i);
        Object.assign(this.getData()[index], replace);
      }
      this.save();
      if (cb) {
        return cb(changed);
      }
      return changed;
    };

    Collection.prototype.remove = function(query, cb) {
      var i, index, ocurrences, removed;
      if (query == null) {
        query = {};
      }
      ocurrences = this.find(query);
      removed = ocurrences.length;
      while (i = ocurrences.shift()) {
        index = this.getData().indexOf(i);
        this.getData().splice(index, 1);
      }
      this.save();
      if (cb) {
        return cb(removed);
      }
      return removed;
    };

    Collection.prototype.save = function() {
      return this.getDriver().save(this);
    };

    Collection.prototype.getData = function() {
      return this._data;
    };

    Collection.prototype.setData = function(_data) {
      this._data = _data != null ? _data : [];
    };

    Collection.prototype.getName = function() {
      return this._name;
    };

    Collection.prototype.setName = function(_name) {
      this._name = _name;
    };

    Collection.prototype.getDriver = function() {
      return this.__driver;
    };

    return Collection;

  })();

  module.exports = Collection;

}).call(this);
