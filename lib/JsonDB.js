// Generated by CoffeeScript 1.12.2
(function() {
  var JsonDB, _Collection, fs, path;

  fs = require('fs');

  path = require('path');

  _Collection = require('./Collection');

  JsonDB = (function() {
    function JsonDB(_path) {
      var stats;
      this._path = _path != null ? _path : './';
      if (!fs.existsSync(this._path)) {
        throw "path " + this._path + " do not exists";
      }
      stats = fs.lstatSync(this._path);
      if (!stats.isDirectory()) {
        throw 'the specified path isnt directory';
      }
    }

    JsonDB.prototype.Collection = function(name) {
      if (!name) {
        throw 'collection name is required';
      }
      return new _Collection(name, this);
    };

    JsonDB.prototype.load = function(collectionName) {
      var data, file;
      file = this.generateFilePath(collectionName);
      data = [];
      if (fs.existsSync(file)) {
        data = JSON.parse(fs.readFileSync(file, 'utf8'));
      }
      if (!Array.isArray(data)) {
        throw 'file exists but it isnt a collection';
      }
      return data;
    };

    JsonDB.prototype.save = function(collection) {
      var collectionData, collectionName, file;
      collectionName = collection.getName();
      collectionData = collection.getData();
      file = this.generateFilePath(collectionName);
      return fs.writeFileSync(file, JSON.stringify(collectionData, null, 2), function(err) {
        if (err) {
          throw err;
        }
        return console.log('saved');
      });
    };

    JsonDB.prototype.generateFilePath = function(collectionName) {
      var fileName;
      fileName = collectionName + '.json';
      return path.join(this.getPath(), fileName);
    };

    JsonDB.prototype.getPath = function() {
      return this._path;
    };

    JsonDB.prototype.setPath = function(_path) {
      this._path = _path;
    };

    return JsonDB;

  })();

  module.exports = JsonDB;

}).call(this);
